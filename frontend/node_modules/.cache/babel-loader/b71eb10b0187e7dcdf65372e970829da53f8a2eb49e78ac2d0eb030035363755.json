{"ast":null,"code":"var _jsxFileName = \"/Users/timhopkin/Documents/Software Development/Interactive Mapping Tool/frontend/src/components/analysis/AnalysisComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useUserPreferences } from '../../context/UserPreferencesContext';\nimport AnalysisMethodExplainer from './AnalysisMethodExplainer';\nimport AnalysisParameterHelp from './AnalysisParameterHelp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalysisComponent = () => {\n  _s();\n  var _datasets$find, _analysisOptions$find, _analysisOptions$find2, _analysisOptions$find3;\n  const [datasets, setDatasets] = useState([]);\n  const [selectedDataset, setSelectedDataset] = useState('');\n  const [analysisType, setAnalysisType] = useState('');\n  const [parameters, setParameters] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [analysisStatus, setAnalysisStatus] = useState(null);\n  const [taskId, setTaskId] = useState(null);\n  const [results, setResults] = useState(null);\n  const [showExplainer, setShowExplainer] = useState(false);\n  const [showParameterHelp, setShowParameterHelp] = useState(false);\n  const [validationErrors, setValidationErrors] = useState({});\n  const announcerRef = useRef(null);\n  const {\n    preferences\n  } = useUserPreferences();\n\n  // Analysis types options with accessibility descriptions\n  const analysisOptions = [{\n    value: 'clustering',\n    label: 'Clustering Analysis',\n    description: 'Groups similar features together based on spatial proximity and attributes. Useful for identifying patterns and hotspots in your data.',\n    params: [{\n      name: 'algorithm',\n      label: 'Algorithm',\n      type: 'select',\n      description: 'The mathematical approach used to form clusters',\n      options: [{\n        value: 'kmeans',\n        label: 'K-Means',\n        description: 'Groups data into a specified number of clusters, minimizing the distance from each point to its cluster center.'\n      }, {\n        value: 'dbscan',\n        label: 'DBSCAN',\n        description: 'Finds clusters of high density separated by areas of low density, without requiring a pre-specified number of clusters.'\n      }]\n    }, {\n      name: 'n_clusters',\n      label: 'Number of Clusters',\n      type: 'number',\n      min: 2,\n      max: 20,\n      description: 'The number of groups to divide your data into. Start with a smaller number (2-5) and adjust based on results.',\n      showIf: {\n        param: 'algorithm',\n        value: 'kmeans'\n      }\n    }, {\n      name: 'eps',\n      label: 'Epsilon (neighborhood size)',\n      type: 'number',\n      step: 0.01,\n      min: 0.01,\n      description: 'The maximum distance between two points to be considered neighbors. Smaller values create more, smaller clusters.',\n      showIf: {\n        param: 'algorithm',\n        value: 'dbscan'\n      }\n    }, {\n      name: 'min_samples',\n      label: 'Minimum Samples',\n      type: 'number',\n      min: 1,\n      description: 'The minimum number of points required to form a dense region. Higher values make the algorithm more selective.',\n      showIf: {\n        param: 'algorithm',\n        value: 'dbscan'\n      }\n    }]\n  }, {\n    value: 'buffer',\n    label: 'Buffer Analysis',\n    description: 'Creates zones around features at a specified distance. Useful for proximity analysis like identifying areas within a certain distance of roads, rivers, or facilities.',\n    params: [{\n      name: 'distance',\n      label: 'Buffer Distance (meters)',\n      type: 'number',\n      min: 0,\n      description: 'The distance in meters to create the buffer zone around each feature. Larger values create wider buffer areas.'\n    }, {\n      name: 'segments',\n      label: 'Buffer Segments',\n      type: 'number',\n      min: 4,\n      max: 64,\n      description: 'The number of line segments used to approximate curved edges. Higher values create smoother buffers but increase processing time.'\n    }, {\n      name: 'dissolve',\n      label: 'Dissolve Overlapping Buffers',\n      type: 'checkbox',\n      description: 'When checked, overlapping buffer areas will be merged into a single feature. Useful for creating service coverage areas.'\n    }]\n  }, {\n    value: 'intersection',\n    label: 'Intersection Analysis',\n    description: 'Finds areas where different spatial datasets overlap. Essential for identifying where two or more conditions are met simultaneously, such as areas that are both forested and on steep slopes.',\n    params: [{\n      name: 'target_dataset',\n      label: 'Target Dataset',\n      type: 'select',\n      description: 'The second dataset to intersect with your selected dataset. The result will show areas where both datasets overlap.',\n      options: [] // This will be populated with available datasets\n    }, {\n      name: 'preserve_attributes',\n      label: 'Preserve Attributes from Both Datasets',\n      type: 'checkbox',\n      description: 'When checked, the resulting features will contain attributes from both input datasets. Otherwise, only geometry will be preserved.'\n    }]\n  }, {\n    value: 'heatmap',\n    label: 'Heatmap Generation',\n    description: 'Creates density-based visualizations to identify concentrations and patterns in point data. Perfect for visualizing population density, incident locations, or any point-based phenomenon.',\n    params: [{\n      name: 'radius',\n      label: 'Point Radius',\n      type: 'number',\n      min: 1,\n      description: 'The influence radius of each point in pixels. Larger values create a smoother, more generalized heatmap.'\n    }, {\n      name: 'intensity',\n      label: 'Intensity',\n      type: 'number',\n      min: 0.1,\n      max: 1,\n      step: 0.1,\n      description: 'The strength of each point\\'s influence. Higher values create more intense, vivid heatmaps.'\n    }, {\n      name: 'gradient',\n      label: 'Color Gradient',\n      type: 'select',\n      description: 'The color scheme used to represent different density levels.',\n      options: [{\n        value: 'default',\n        label: 'Default (Red-Yellow)',\n        description: 'Standard heat gradient from yellow (low) to red (high)'\n      }, {\n        value: 'blues',\n        label: 'Blues',\n        description: 'Blue gradient suitable for water-related data or for better color-blindness accessibility'\n      }, {\n        value: 'spectral',\n        label: 'Spectral',\n        description: 'Multi-color gradient from blue to red, good for showing fine variations in density'\n      }, {\n        value: 'accessible',\n        label: 'Accessible (Yellow-Purple)',\n        description: 'Color-blind friendly gradient that works well for most types of color vision deficiency'\n      }]\n    }, {\n      name: 'opacity',\n      label: 'Opacity',\n      type: 'number',\n      min: 0.1,\n      max: 1,\n      step: 0.1,\n      description: 'The transparency level of the heatmap. Lower values allow underlying map features to be more visible.'\n    }]\n  }];\n\n  // Fetch available datasets on component mount\n  useEffect(() => {\n    const fetchDatasets = async () => {\n      try {\n        // This endpoint needs to be implemented in the backend\n        const response = await axios.get('/api/data/datasets');\n        setDatasets(response.data);\n      } catch (error) {\n        console.error('Failed to fetch datasets:', error);\n        announceToScreenReader('Error loading datasets. Please try again later.');\n\n        // Set mock data for development\n        setDatasets([{\n          id: '1',\n          name: 'Land Use 2023',\n          description: 'Current land use classifications for the region'\n        }, {\n          id: '2',\n          name: 'Population Data',\n          description: 'Census population data by district'\n        }, {\n          id: '3',\n          name: 'Infrastructure Map',\n          description: 'Roads, utilities and public buildings'\n        }]);\n      }\n    };\n    fetchDatasets();\n  }, []);\n\n  // Poll for task status when taskId is available\n  useEffect(() => {\n    if (!taskId) return;\n    const interval = setInterval(async () => {\n      try {\n        const response = await axios.get(`/api/analysis/status/${taskId}`);\n        setAnalysisStatus(response.data.status);\n        if (response.data.state === 'SUCCESS') {\n          setResults(response.data.result);\n          clearInterval(interval);\n          announceToScreenReader('Analysis completed successfully. Results are now available.');\n        } else if (response.data.state === 'FAILURE') {\n          announceToScreenReader('Analysis failed. Please check the error message and try again.');\n          clearInterval(interval);\n        }\n      } catch (error) {\n        console.error('Error checking task status:', error);\n        clearInterval(interval);\n      }\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [taskId]);\n  const handleAnalysisTypeChange = e => {\n    const selectedType = e.target.value;\n    setAnalysisType(selectedType);\n\n    // Reset parameters when analysis type changes\n    const initialParams = {};\n    const selectedAnalysis = analysisOptions.find(option => option.value === selectedType);\n    if (selectedAnalysis) {\n      selectedAnalysis.params.forEach(param => {\n        if (param.type === 'select' && param.options.length > 0) {\n          initialParams[param.name] = param.options[0].value;\n        } else if (param.type === 'number') {\n          initialParams[param.name] = param.min || 0;\n        } else if (param.type === 'checkbox') {\n          initialParams[param.name] = false;\n        } else {\n          initialParams[param.name] = '';\n        }\n      });\n\n      // Announce to screen readers\n      announceToScreenReader(`Analysis type changed to ${selectedAnalysis.label}. ${selectedAnalysis.description}`);\n    }\n    setParameters(initialParams);\n  };\n  const handleParameterChange = (paramName, value) => {\n    setParameters(prevParams => ({\n      ...prevParams,\n      [paramName]: value\n    }));\n    const selectedAnalysis = analysisOptions.find(option => option.value === analysisType);\n    if (selectedAnalysis) {\n      const changedParam = selectedAnalysis.params.find(param => param.name === paramName);\n      if (changedParam) {\n        if (changedParam.type === 'select') {\n          const option = changedParam.options.find(opt => opt.value === value);\n          if (option) {\n            announceToScreenReader(`${changedParam.label} set to ${option.label}.`);\n          }\n        } else if (changedParam.type === 'checkbox') {\n          announceToScreenReader(`${changedParam.label} ${value ? 'enabled' : 'disabled'}.`);\n        } else {\n          announceToScreenReader(`${changedParam.label} set to ${value}.`);\n        }\n      }\n    }\n  };\n  const validateForm = () => {\n    const errors = {};\n    if (!selectedDataset) {\n      errors.dataset = 'Please select a dataset';\n    }\n    if (!analysisType) {\n      errors.analysisType = 'Please select an analysis type';\n    }\n\n    // Validate specific parameters\n    const selectedAnalysis = analysisOptions.find(option => option.value === analysisType);\n    if (selectedAnalysis) {\n      selectedAnalysis.params.forEach(param => {\n        // Skip validation for parameters that aren't visible based on showIf conditions\n        if (param.showIf && parameters[param.showIf.param] !== param.showIf.value) {\n          return;\n        }\n        if (param.type === 'number') {\n          const value = parameters[param.name];\n          if (value === undefined || value === null || value === '') {\n            errors[param.name] = `${param.label} is required`;\n          } else if (param.min !== undefined && value < param.min) {\n            errors[param.name] = `${param.label} must be at least ${param.min}`;\n          } else if (param.max !== undefined && value > param.max) {\n            errors[param.name] = `${param.label} must be at most ${param.max}`;\n          }\n        } else if (param.type === 'select' && param.options.length > 0) {\n          if (!parameters[param.name]) {\n            errors[param.name] = `Please select a ${param.label.toLowerCase()}`;\n          }\n        }\n      });\n    }\n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateForm()) {\n      const errorMessages = Object.values(validationErrors).join('. ');\n      announceToScreenReader(`Form has errors: ${errorMessages}`);\n      return;\n    }\n    setLoading(true);\n    setTaskId(null);\n    setResults(null);\n    setAnalysisStatus('Starting analysis...');\n    announceToScreenReader('Analysis starting. This may take a few moments to complete.');\n    try {\n      // This endpoint needs to be implemented in the backend\n      const response = await axios.post('/api/analysis/start', {\n        dataset_id: selectedDataset,\n        analysis_type: analysisType,\n        parameters: parameters\n      });\n      setTaskId(response.data.task_id);\n      setAnalysisStatus('Analysis in progress...');\n      announceToScreenReader('Analysis is now running. You will be notified when it completes.');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message;\n      setAnalysisStatus(`Analysis failed: ${errorMessage}`);\n      announceToScreenReader(`Analysis failed: ${errorMessage}`);\n      setLoading(false);\n    }\n  };\n\n  // Announce messages to screen readers\n  const announceToScreenReader = message => {\n    if (announcerRef.current) {\n      announcerRef.current.textContent = message;\n    }\n  };\n\n  // Determine which parameters to show based on the selected analysis type\n  const getVisibleParameters = () => {\n    const selectedAnalysis = analysisOptions.find(option => option.value === analysisType);\n    if (!selectedAnalysis) return [];\n    return selectedAnalysis.params.filter(param => {\n      if (!param.showIf) return true;\n      return parameters[param.showIf.param] === param.showIf.value;\n    });\n  };\n\n  // Get the current analysis method description\n  const getCurrentAnalysisDescription = () => {\n    const selectedAnalysis = analysisOptions.find(option => option.value === analysisType);\n    return selectedAnalysis ? selectedAnalysis.description : '';\n  };\n\n  // Update intersection analysis target dataset options\n  useEffect(() => {\n    if (analysisType === 'intersection') {\n      const analysisIndex = analysisOptions.findIndex(option => option.value === 'intersection');\n      if (analysisIndex >= 0) {\n        const paramIndex = analysisOptions[analysisIndex].params.findIndex(p => p.name === 'target_dataset');\n        if (paramIndex >= 0) {\n          const datasetOptions = datasets.filter(d => d.id !== selectedDataset) // Exclude the selected dataset\n          .map(d => ({\n            value: d.id,\n            label: d.name,\n            description: d.description\n          }));\n          analysisOptions[analysisIndex].params[paramIndex].options = datasetOptions;\n\n          // Set default value if available\n          if (datasetOptions.length > 0 && (!parameters.target_dataset || !datasetOptions.find(o => o.value === parameters.target_dataset))) {\n            handleParameterChange('target_dataset', datasetOptions[0].value);\n          }\n        }\n      }\n    }\n  }, [datasets, selectedDataset, analysisType]);\n\n  // Get the selected dataset name for display\n  const getSelectedDatasetName = () => {\n    const dataset = datasets.find(d => d.id === selectedDataset);\n    return dataset ? dataset.name : '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"analysis-component\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: announcerRef,\n      className: \"sr-only\",\n      \"aria-live\": \"polite\",\n      \"aria-atomic\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"analysis-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"analysis-heading\",\n        children: \"Spatial Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"analysis-intro\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Transform your spatial data into actionable insights using our suite of analysis tools. Select a dataset, choose an analysis method, and customize parameters to fit your needs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        \"aria-labelledby\": \"analysis-heading\",\n        noValidate: true,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"dataset\",\n            className: validationErrors.dataset ? 'error' : '',\n            children: [\"Select Dataset \", /*#__PURE__*/_jsxDEV(\"span\", {\n              \"aria-hidden\": \"true\",\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"required-indicator sr-only\",\n              children: \"required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"dataset\",\n            className: `${preferences.textSize !== 'default' ? preferences.textSize : ''} ${validationErrors.dataset ? 'error-input' : ''}`,\n            value: selectedDataset,\n            onChange: e => setSelectedDataset(e.target.value),\n            required: true,\n            \"aria-required\": \"true\",\n            \"aria-invalid\": !!validationErrors.dataset,\n            \"aria-describedby\": validationErrors.dataset ? 'dataset-error' : undefined,\n            disabled: loading,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"-- Select a dataset --\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 15\n            }, this), datasets.map(dataset => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dataset.id,\n              children: dataset.name\n            }, dataset.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this), validationErrors.dataset && /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"dataset-error\",\n            className: \"error-message\",\n            role: \"alert\",\n            children: validationErrors.dataset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this), selectedDataset && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"selected-dataset-info\",\n            children: (_datasets$find = datasets.find(d => d.id === selectedDataset)) === null || _datasets$find === void 0 ? void 0 : _datasets$find.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"analysisType\",\n            className: validationErrors.analysisType ? 'error' : '',\n            children: [\"Analysis Type \", /*#__PURE__*/_jsxDEV(\"span\", {\n              \"aria-hidden\": \"true\",\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"required-indicator sr-only\",\n              children: \"required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"analysisType\",\n            className: `${preferences.textSize !== 'default' ? preferences.textSize : ''} ${validationErrors.analysisType ? 'error-input' : ''}`,\n            value: analysisType,\n            onChange: handleAnalysisTypeChange,\n            required: true,\n            \"aria-required\": \"true\",\n            \"aria-invalid\": !!validationErrors.analysisType,\n            \"aria-describedby\": validationErrors.analysisType ? 'analysis-type-error' : 'analysis-type-help',\n            disabled: loading,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"-- Select an analysis type --\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 15\n            }, this), analysisOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              children: option.label\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this), validationErrors.analysisType && /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"analysis-type-error\",\n            className: \"error-message\",\n            role: \"alert\",\n            children: validationErrors.analysisType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"analysis-type-help\",\n            className: \"help-text\",\n            children: analysisType ? getCurrentAnalysisDescription() : 'Select the type of analysis you want to perform on your data.'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 13\n          }, this), analysisType && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"info-button\",\n            onClick: () => setShowExplainer(true),\n            \"aria-label\": `Learn more about ${(_analysisOptions$find = analysisOptions.find(opt => opt.value === analysisType)) === null || _analysisOptions$find === void 0 ? void 0 : _analysisOptions$find.label}`,\n            children: \"Learn more about this analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this), analysisType && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-parameters\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Analysis Parameters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"parameters-help\",\n            children: \"Customize these parameters to fine-tune your analysis. Hover over the help icon or use the information button for detailed explanations.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this), getVisibleParameters().map(param => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"parameter-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: param.name,\n                className: validationErrors[param.name] ? 'error' : '',\n                children: [param.label, param.type !== 'checkbox' && /*#__PURE__*/_jsxDEV(\"span\", {\n                  \"aria-hidden\": \"true\",\n                  children: \"*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 514,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"required-indicator sr-only\",\n                  children: param.type !== 'checkbox' ? 'required' : 'optional'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 515,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"parameter-help-button\",\n                onClick: () => {\n                  setShowParameterHelp({\n                    name: param.name,\n                    label: param.label,\n                    description: param.description\n                  });\n                },\n                \"aria-label\": `Help for ${param.label}`,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  \"aria-hidden\": \"true\",\n                  children: \"?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 529,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 19\n            }, this), param.type === 'select' ? /*#__PURE__*/_jsxDEV(\"select\", {\n              id: param.name,\n              className: `${preferences.textSize !== 'default' ? preferences.textSize : ''} ${validationErrors[param.name] ? 'error-input' : ''}`,\n              value: parameters[param.name] || '',\n              onChange: e => handleParameterChange(param.name, e.target.value),\n              disabled: loading,\n              \"aria-invalid\": !!validationErrors[param.name],\n              \"aria-describedby\": validationErrors[param.name] ? `${param.name}-error` : `${param.name}-help`,\n              children: param.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, option.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 21\n            }, this) : param.type === 'number' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"number-input-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                id: param.name,\n                className: `${preferences.textSize !== 'default' ? preferences.textSize : ''} ${validationErrors[param.name] ? 'error-input' : ''}`,\n                value: parameters[param.name] || '',\n                onChange: e => handleParameterChange(param.name, Number(e.target.value)),\n                min: param.min,\n                max: param.max,\n                step: param.step || 1,\n                disabled: loading,\n                \"aria-invalid\": !!validationErrors[param.name],\n                \"aria-describedby\": validationErrors[param.name] ? `${param.name}-error` : `${param.name}-help`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 23\n              }, this), param.min !== undefined && param.max !== undefined && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"range-indicator\",\n                children: [\"Range: \", param.min, \" to \", param.max]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 565,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 21\n            }, this) : param.type === 'checkbox' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"checkbox-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: param.name,\n                checked: parameters[param.name] || false,\n                onChange: e => handleParameterChange(param.name, e.target.checked),\n                disabled: loading,\n                \"aria-describedby\": `${param.name}-help`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 572,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"checkbox-label\",\n                children: param.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 580,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: param.name,\n              className: `${preferences.textSize !== 'default' ? preferences.textSize : ''} ${validationErrors[param.name] ? 'error-input' : ''}`,\n              value: parameters[param.name] || '',\n              onChange: e => handleParameterChange(param.name, e.target.value),\n              disabled: loading,\n              \"aria-invalid\": !!validationErrors[param.name],\n              \"aria-describedby\": validationErrors[param.name] ? `${param.name}-error` : `${param.name}-help`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 21\n            }, this), validationErrors[param.name] && /*#__PURE__*/_jsxDEV(\"div\", {\n              id: `${param.name}-error`,\n              className: \"error-message\",\n              role: \"alert\",\n              children: validationErrors[param.name]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: `${param.name}-help`,\n              className: \"help-text\",\n              children: param.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 19\n            }, this)]\n          }, param.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"primary-button run-button\",\n            disabled: loading || !selectedDataset || !analysisType,\n            \"aria-busy\": loading,\n            children: loading ? 'Running Analysis...' : 'Run Analysis'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"secondary-button reset-button\",\n            onClick: () => {\n              setParameters({});\n              setAnalysisType('');\n              setAnalysisStatus(null);\n              setResults(null);\n              setTaskId(null);\n              setValidationErrors({});\n            },\n            disabled: loading || !analysisType && !selectedDataset,\n            children: \"Reset Form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), analysisStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"analysis-status\",\n        role: \"status\",\n        \"aria-live\": \"polite\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Analysis Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: analysisStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 13\n        }, this), taskId && !results && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-progress\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-spinner\",\n            \"aria-hidden\": \"true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"progress-text\",\n            children: \"Your analysis is running. This may take a moment...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 11\n      }, this), results && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"analysis-results\",\n        role: \"region\",\n        \"aria-label\": \"Analysis results\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Analysis Results: \", (_analysisOptions$find2 = analysisOptions.find(opt => opt.value === analysisType)) === null || _analysisOptions$find2 === void 0 ? void 0 : _analysisOptions$find2.label]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-summary\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Dataset:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 17\n            }, this), \" \", getSelectedDatasetName(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 69\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Analysis Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 17\n            }, this), \" \", (_analysisOptions$find3 = analysisOptions.find(opt => opt.value === analysisType)) === null || _analysisOptions$find3 === void 0 ? void 0 : _analysisOptions$find3.label, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 113\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Completed:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 17\n            }, this), \" \", new Date().toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-data\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Output Statistics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"result-stats\",\n            children: results.statistics && Object.entries(results.statistics).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-label\",\n                children: key.replace(/_/g, ' ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 674,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-value\",\n                children: typeof value === 'number' ? value.toLocaleString() : value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 675,\n                columnNumber: 21\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-visualization\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Visualization Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"visualization-placeholder\",\n            \"aria-label\": \"Visualization of analysis results\",\n            children: results.output_layers && results.output_layers.length > 0 ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/placeholder-map-result.png\",\n              alt: `${analysisType} analysis result visualization`,\n              className: \"result-preview-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No visualization available for this analysis.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              window.location.href = `/map?analysis=${taskId}`;\n            },\n            className: \"primary-button add-to-map-btn\",\n            \"aria-label\": \"Add these results to the interactive map view\",\n            children: \"View on Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              // Mock export functionality\n              announceToScreenReader(\"Exporting results. Your download will begin shortly.\");\n            },\n            className: \"secondary-button export-btn\",\n            \"aria-label\": \"Export these results to a file\",\n            children: \"Export Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setResults(null);\n              setTaskId(null);\n              setAnalysisStatus(null);\n              announceToScreenReader(\"Results cleared. You can now run a new analysis.\");\n            },\n            className: \"text-button clear-btn\",\n            \"aria-label\": \"Clear these results and start a new analysis\",\n            children: \"Clear Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this), showExplainer && analysisType && /*#__PURE__*/_jsxDEV(AnalysisMethodExplainer, {\n      analysisType: analysisType,\n      options: analysisOptions.find(opt => opt.value === analysisType),\n      onClose: () => setShowExplainer(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 737,\n      columnNumber: 9\n    }, this), showParameterHelp && /*#__PURE__*/_jsxDEV(AnalysisParameterHelp, {\n      parameter: showParameterHelp,\n      onClose: () => setShowParameterHelp(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 746,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 390,\n    columnNumber: 5\n  }, this);\n};\n_s(AnalysisComponent, \"jVCOBzVhpVvT1O1vZ0huQrXEXK8=\", false, function () {\n  return [useUserPreferences];\n});\n_c = AnalysisComponent;\nexport default AnalysisComponent;\nvar _c;\n$RefreshReg$(_c, \"AnalysisComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useUserPreferences","AnalysisMethodExplainer","AnalysisParameterHelp","jsxDEV","_jsxDEV","AnalysisComponent","_s","_datasets$find","_analysisOptions$find","_analysisOptions$find2","_analysisOptions$find3","datasets","setDatasets","selectedDataset","setSelectedDataset","analysisType","setAnalysisType","parameters","setParameters","loading","setLoading","analysisStatus","setAnalysisStatus","taskId","setTaskId","results","setResults","showExplainer","setShowExplainer","showParameterHelp","setShowParameterHelp","validationErrors","setValidationErrors","announcerRef","preferences","analysisOptions","value","label","description","params","name","type","options","min","max","showIf","param","step","fetchDatasets","response","get","data","error","console","announceToScreenReader","id","interval","setInterval","status","state","result","clearInterval","handleAnalysisTypeChange","e","selectedType","target","initialParams","selectedAnalysis","find","option","forEach","length","handleParameterChange","paramName","prevParams","changedParam","opt","validateForm","errors","dataset","undefined","toLowerCase","Object","keys","handleSubmit","preventDefault","errorMessages","values","join","post","dataset_id","analysis_type","task_id","_error$response","_error$response$data","errorMessage","message","current","textContent","getVisibleParameters","filter","getCurrentAnalysisDescription","analysisIndex","findIndex","paramIndex","p","datasetOptions","d","map","target_dataset","o","getSelectedDatasetName","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","noValidate","htmlFor","textSize","onChange","required","disabled","role","onClick","Number","checked","Date","toLocaleString","statistics","entries","key","replace","output_layers","src","alt","window","location","href","onClose","parameter","_c","$RefreshReg$"],"sources":["/Users/timhopkin/Documents/Software Development/Interactive Mapping Tool/frontend/src/components/analysis/AnalysisComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useUserPreferences } from '../../context/UserPreferencesContext';\nimport AnalysisMethodExplainer from './AnalysisMethodExplainer';\nimport AnalysisParameterHelp from './AnalysisParameterHelp';\n\nconst AnalysisComponent = () => {\n  const [datasets, setDatasets] = useState([]);\n  const [selectedDataset, setSelectedDataset] = useState('');\n  const [analysisType, setAnalysisType] = useState('');\n  const [parameters, setParameters] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [analysisStatus, setAnalysisStatus] = useState(null);\n  const [taskId, setTaskId] = useState(null);\n  const [results, setResults] = useState(null);\n  const [showExplainer, setShowExplainer] = useState(false);\n  const [showParameterHelp, setShowParameterHelp] = useState(false);\n  const [validationErrors, setValidationErrors] = useState({});\n  const announcerRef = useRef(null);\n  const { preferences } = useUserPreferences();\n\n  // Analysis types options with accessibility descriptions\n  const analysisOptions = [\n    { \n      value: 'clustering', \n      label: 'Clustering Analysis', \n      description: 'Groups similar features together based on spatial proximity and attributes. Useful for identifying patterns and hotspots in your data.',\n      params: [\n        { \n          name: 'algorithm', \n          label: 'Algorithm', \n          type: 'select', \n          description: 'The mathematical approach used to form clusters',\n          options: [\n            { value: 'kmeans', label: 'K-Means', description: 'Groups data into a specified number of clusters, minimizing the distance from each point to its cluster center.' },\n            { value: 'dbscan', label: 'DBSCAN', description: 'Finds clusters of high density separated by areas of low density, without requiring a pre-specified number of clusters.' }\n          ] \n        },\n        { \n          name: 'n_clusters', \n          label: 'Number of Clusters', \n          type: 'number', \n          min: 2, \n          max: 20, \n          description: 'The number of groups to divide your data into. Start with a smaller number (2-5) and adjust based on results.',\n          showIf: { param: 'algorithm', value: 'kmeans' } \n        },\n        { \n          name: 'eps', \n          label: 'Epsilon (neighborhood size)', \n          type: 'number', \n          step: 0.01,\n          min: 0.01,\n          description: 'The maximum distance between two points to be considered neighbors. Smaller values create more, smaller clusters.',\n          showIf: { param: 'algorithm', value: 'dbscan' } \n        },\n        { \n          name: 'min_samples', \n          label: 'Minimum Samples', \n          type: 'number', \n          min: 1,\n          description: 'The minimum number of points required to form a dense region. Higher values make the algorithm more selective.',\n          showIf: { param: 'algorithm', value: 'dbscan' } \n        }\n      ] \n    },\n    { \n      value: 'buffer', \n      label: 'Buffer Analysis', \n      description: 'Creates zones around features at a specified distance. Useful for proximity analysis like identifying areas within a certain distance of roads, rivers, or facilities.',\n      params: [\n        { \n          name: 'distance', \n          label: 'Buffer Distance (meters)', \n          type: 'number', \n          min: 0,\n          description: 'The distance in meters to create the buffer zone around each feature. Larger values create wider buffer areas.' \n        },\n        { \n          name: 'segments', \n          label: 'Buffer Segments', \n          type: 'number', \n          min: 4, \n          max: 64,\n          description: 'The number of line segments used to approximate curved edges. Higher values create smoother buffers but increase processing time.' \n        },\n        {\n          name: 'dissolve',\n          label: 'Dissolve Overlapping Buffers',\n          type: 'checkbox',\n          description: 'When checked, overlapping buffer areas will be merged into a single feature. Useful for creating service coverage areas.'\n        }\n      ] \n    },\n    { \n      value: 'intersection', \n      label: 'Intersection Analysis', \n      description: 'Finds areas where different spatial datasets overlap. Essential for identifying where two or more conditions are met simultaneously, such as areas that are both forested and on steep slopes.',\n      params: [\n        { \n          name: 'target_dataset', \n          label: 'Target Dataset', \n          type: 'select', \n          description: 'The second dataset to intersect with your selected dataset. The result will show areas where both datasets overlap.',\n          options: [] // This will be populated with available datasets\n        },\n        {\n          name: 'preserve_attributes',\n          label: 'Preserve Attributes from Both Datasets',\n          type: 'checkbox',\n          description: 'When checked, the resulting features will contain attributes from both input datasets. Otherwise, only geometry will be preserved.'\n        }\n      ] \n    },\n    { \n      value: 'heatmap', \n      label: 'Heatmap Generation', \n      description: 'Creates density-based visualizations to identify concentrations and patterns in point data. Perfect for visualizing population density, incident locations, or any point-based phenomenon.',\n      params: [\n        { \n          name: 'radius', \n          label: 'Point Radius', \n          type: 'number', \n          min: 1,\n          description: 'The influence radius of each point in pixels. Larger values create a smoother, more generalized heatmap.'\n        },\n        { \n          name: 'intensity', \n          label: 'Intensity', \n          type: 'number', \n          min: 0.1, \n          max: 1, \n          step: 0.1,\n          description: 'The strength of each point\\'s influence. Higher values create more intense, vivid heatmaps.'\n        },\n        { \n          name: 'gradient', \n          label: 'Color Gradient', \n          type: 'select', \n          description: 'The color scheme used to represent different density levels.',\n          options: [\n            { value: 'default', label: 'Default (Red-Yellow)', description: 'Standard heat gradient from yellow (low) to red (high)' },\n            { value: 'blues', label: 'Blues', description: 'Blue gradient suitable for water-related data or for better color-blindness accessibility' },\n            { value: 'spectral', label: 'Spectral', description: 'Multi-color gradient from blue to red, good for showing fine variations in density' },\n            { value: 'accessible', label: 'Accessible (Yellow-Purple)', description: 'Color-blind friendly gradient that works well for most types of color vision deficiency' }\n          ] \n        },\n        {\n          name: 'opacity',\n          label: 'Opacity',\n          type: 'number',\n          min: 0.1,\n          max: 1,\n          step: 0.1,\n          description: 'The transparency level of the heatmap. Lower values allow underlying map features to be more visible.'\n        }\n      ] \n    }\n  ];\n\n  // Fetch available datasets on component mount\n  useEffect(() => {\n    const fetchDatasets = async () => {\n      try {\n        // This endpoint needs to be implemented in the backend\n        const response = await axios.get('/api/data/datasets');\n        setDatasets(response.data);\n      } catch (error) {\n        console.error('Failed to fetch datasets:', error);\n        announceToScreenReader('Error loading datasets. Please try again later.');\n        \n        // Set mock data for development\n        setDatasets([\n          { id: '1', name: 'Land Use 2023', description: 'Current land use classifications for the region' },\n          { id: '2', name: 'Population Data', description: 'Census population data by district' },\n          { id: '3', name: 'Infrastructure Map', description: 'Roads, utilities and public buildings' }\n        ]);\n      }\n    };\n\n    fetchDatasets();\n  }, []);\n\n  // Poll for task status when taskId is available\n  useEffect(() => {\n    if (!taskId) return;\n\n    const interval = setInterval(async () => {\n      try {\n        const response = await axios.get(`/api/analysis/status/${taskId}`);\n        setAnalysisStatus(response.data.status);\n        \n        if (response.data.state === 'SUCCESS') {\n          setResults(response.data.result);\n          clearInterval(interval);\n          announceToScreenReader('Analysis completed successfully. Results are now available.');\n        } else if (response.data.state === 'FAILURE') {\n          announceToScreenReader('Analysis failed. Please check the error message and try again.');\n          clearInterval(interval);\n        }\n      } catch (error) {\n        console.error('Error checking task status:', error);\n        clearInterval(interval);\n      }\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [taskId]);\n\n  const handleAnalysisTypeChange = (e) => {\n    const selectedType = e.target.value;\n    setAnalysisType(selectedType);\n    \n    // Reset parameters when analysis type changes\n    const initialParams = {};\n    const selectedAnalysis = analysisOptions.find(option => option.value === selectedType);\n    \n    if (selectedAnalysis) {\n      selectedAnalysis.params.forEach(param => {\n        if (param.type === 'select' && param.options.length > 0) {\n          initialParams[param.name] = param.options[0].value;\n        } else if (param.type === 'number') {\n          initialParams[param.name] = param.min || 0;\n        } else if (param.type === 'checkbox') {\n          initialParams[param.name] = false;\n        } else {\n          initialParams[param.name] = '';\n        }\n      });\n      \n      // Announce to screen readers\n      announceToScreenReader(`Analysis type changed to ${selectedAnalysis.label}. ${selectedAnalysis.description}`);\n    }\n    \n    setParameters(initialParams);\n  };\n\n  const handleParameterChange = (paramName, value) => {\n    setParameters(prevParams => ({\n      ...prevParams,\n      [paramName]: value\n    }));\n    \n    const selectedAnalysis = analysisOptions.find(option => option.value === analysisType);\n    if (selectedAnalysis) {\n      const changedParam = selectedAnalysis.params.find(param => param.name === paramName);\n      if (changedParam) {\n        if (changedParam.type === 'select') {\n          const option = changedParam.options.find(opt => opt.value === value);\n          if (option) {\n            announceToScreenReader(`${changedParam.label} set to ${option.label}.`);\n          }\n        } else if (changedParam.type === 'checkbox') {\n          announceToScreenReader(`${changedParam.label} ${value ? 'enabled' : 'disabled'}.`);\n        } else {\n          announceToScreenReader(`${changedParam.label} set to ${value}.`);\n        }\n      }\n    }\n  };\n\n  const validateForm = () => {\n    const errors = {};\n    \n    if (!selectedDataset) {\n      errors.dataset = 'Please select a dataset';\n    }\n    \n    if (!analysisType) {\n      errors.analysisType = 'Please select an analysis type';\n    }\n    \n    // Validate specific parameters\n    const selectedAnalysis = analysisOptions.find(option => option.value === analysisType);\n    if (selectedAnalysis) {\n      selectedAnalysis.params.forEach(param => {\n        // Skip validation for parameters that aren't visible based on showIf conditions\n        if (param.showIf && parameters[param.showIf.param] !== param.showIf.value) {\n          return;\n        }\n        \n        if (param.type === 'number') {\n          const value = parameters[param.name];\n          if (value === undefined || value === null || value === '') {\n            errors[param.name] = `${param.label} is required`;\n          } else if (param.min !== undefined && value < param.min) {\n            errors[param.name] = `${param.label} must be at least ${param.min}`;\n          } else if (param.max !== undefined && value > param.max) {\n            errors[param.name] = `${param.label} must be at most ${param.max}`;\n          }\n        } else if (param.type === 'select' && param.options.length > 0) {\n          if (!parameters[param.name]) {\n            errors[param.name] = `Please select a ${param.label.toLowerCase()}`;\n          }\n        }\n      });\n    }\n    \n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      const errorMessages = Object.values(validationErrors).join('. ');\n      announceToScreenReader(`Form has errors: ${errorMessages}`);\n      return;\n    }\n    \n    setLoading(true);\n    setTaskId(null);\n    setResults(null);\n    setAnalysisStatus('Starting analysis...');\n    announceToScreenReader('Analysis starting. This may take a few moments to complete.');\n    \n    try {\n      // This endpoint needs to be implemented in the backend\n      const response = await axios.post('/api/analysis/start', {\n        dataset_id: selectedDataset,\n        analysis_type: analysisType,\n        parameters: parameters\n      });\n      \n      setTaskId(response.data.task_id);\n      setAnalysisStatus('Analysis in progress...');\n      announceToScreenReader('Analysis is now running. You will be notified when it completes.');\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || error.message;\n      setAnalysisStatus(`Analysis failed: ${errorMessage}`);\n      announceToScreenReader(`Analysis failed: ${errorMessage}`);\n      setLoading(false);\n    }\n  };\n\n  // Announce messages to screen readers\n  const announceToScreenReader = (message) => {\n    if (announcerRef.current) {\n      announcerRef.current.textContent = message;\n    }\n  };\n\n  // Determine which parameters to show based on the selected analysis type\n  const getVisibleParameters = () => {\n    const selectedAnalysis = analysisOptions.find(option => option.value === analysisType);\n    if (!selectedAnalysis) return [];\n    \n    return selectedAnalysis.params.filter(param => {\n      if (!param.showIf) return true;\n      return parameters[param.showIf.param] === param.showIf.value;\n    });\n  };\n\n  // Get the current analysis method description\n  const getCurrentAnalysisDescription = () => {\n    const selectedAnalysis = analysisOptions.find(option => option.value === analysisType);\n    return selectedAnalysis ? selectedAnalysis.description : '';\n  };\n\n  // Update intersection analysis target dataset options\n  useEffect(() => {\n    if (analysisType === 'intersection') {\n      const analysisIndex = analysisOptions.findIndex(option => option.value === 'intersection');\n      if (analysisIndex >= 0) {\n        const paramIndex = analysisOptions[analysisIndex].params.findIndex(p => p.name === 'target_dataset');\n        if (paramIndex >= 0) {\n          const datasetOptions = datasets\n            .filter(d => d.id !== selectedDataset) // Exclude the selected dataset\n            .map(d => ({ value: d.id, label: d.name, description: d.description }));\n          \n          analysisOptions[analysisIndex].params[paramIndex].options = datasetOptions;\n          \n          // Set default value if available\n          if (datasetOptions.length > 0 && (!parameters.target_dataset || !datasetOptions.find(o => o.value === parameters.target_dataset))) {\n            handleParameterChange('target_dataset', datasetOptions[0].value);\n          }\n        }\n      }\n    }\n  }, [datasets, selectedDataset, analysisType]);\n\n  // Get the selected dataset name for display\n  const getSelectedDatasetName = () => {\n    const dataset = datasets.find(d => d.id === selectedDataset);\n    return dataset ? dataset.name : '';\n  };\n\n  return (\n    <div className=\"analysis-component\">\n      {/* Screen reader announcer */}\n      <div \n        ref={announcerRef}\n        className=\"sr-only\" \n        aria-live=\"polite\" \n        aria-atomic=\"true\"\n      ></div>\n      \n      <div className=\"analysis-container\">\n        <h2 id=\"analysis-heading\">Spatial Analysis</h2>\n        \n        <div className=\"analysis-intro\">\n          <p>\n            Transform your spatial data into actionable insights using our suite of analysis tools.\n            Select a dataset, choose an analysis method, and customize parameters to fit your needs.\n          </p>\n        </div>\n        \n        <form \n          onSubmit={handleSubmit}\n          aria-labelledby=\"analysis-heading\"\n          noValidate\n        >\n          <div className=\"form-group\">\n            <label \n              htmlFor=\"dataset\"\n              className={validationErrors.dataset ? 'error' : ''}\n            >\n              Select Dataset <span aria-hidden=\"true\">*</span>\n              <span className=\"required-indicator sr-only\">required</span>\n            </label>\n            <select\n              id=\"dataset\"\n              className={`${preferences.textSize !== 'default' ? preferences.textSize : ''} ${validationErrors.dataset ? 'error-input' : ''}`}\n              value={selectedDataset}\n              onChange={(e) => setSelectedDataset(e.target.value)}\n              required\n              aria-required=\"true\"\n              aria-invalid={!!validationErrors.dataset}\n              aria-describedby={validationErrors.dataset ? 'dataset-error' : undefined}\n              disabled={loading}\n            >\n              <option value=\"\">-- Select a dataset --</option>\n              {datasets.map(dataset => (\n                <option key={dataset.id} value={dataset.id}>\n                  {dataset.name}\n                </option>\n              ))}\n            </select>\n            {validationErrors.dataset && (\n              <div id=\"dataset-error\" className=\"error-message\" role=\"alert\">\n                {validationErrors.dataset}\n              </div>\n            )}\n            {selectedDataset && (\n              <div className=\"selected-dataset-info\">\n                {datasets.find(d => d.id === selectedDataset)?.description}\n              </div>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label \n              htmlFor=\"analysisType\"\n              className={validationErrors.analysisType ? 'error' : ''}\n            >\n              Analysis Type <span aria-hidden=\"true\">*</span>\n              <span className=\"required-indicator sr-only\">required</span>\n            </label>\n            <select\n              id=\"analysisType\"\n              className={`${preferences.textSize !== 'default' ? preferences.textSize : ''} ${validationErrors.analysisType ? 'error-input' : ''}`}\n              value={analysisType}\n              onChange={handleAnalysisTypeChange}\n              required\n              aria-required=\"true\"\n              aria-invalid={!!validationErrors.analysisType}\n              aria-describedby={validationErrors.analysisType ? 'analysis-type-error' : 'analysis-type-help'}\n              disabled={loading}\n            >\n              <option value=\"\">-- Select an analysis type --</option>\n              {analysisOptions.map(option => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            {validationErrors.analysisType && (\n              <div id=\"analysis-type-error\" className=\"error-message\" role=\"alert\">\n                {validationErrors.analysisType}\n              </div>\n            )}\n            <div id=\"analysis-type-help\" className=\"help-text\">\n              {analysisType ? getCurrentAnalysisDescription() : 'Select the type of analysis you want to perform on your data.'}\n            </div>\n            \n            {analysisType && (\n              <button \n                type=\"button\"\n                className=\"info-button\"\n                onClick={() => setShowExplainer(true)}\n                aria-label={`Learn more about ${analysisOptions.find(opt => opt.value === analysisType)?.label}`}\n              >\n                Learn more about this analysis\n              </button>\n            )}\n          </div>\n          \n          {analysisType && (\n            <div className=\"analysis-parameters\">\n              <h3>Analysis Parameters</h3>\n              <p className=\"parameters-help\">\n                Customize these parameters to fine-tune your analysis. Hover over the help icon or use the information button for detailed explanations.\n              </p>\n              \n              {getVisibleParameters().map(param => (\n                <div className=\"form-group\" key={param.name}>\n                  <div className=\"parameter-header\">\n                    <label \n                      htmlFor={param.name}\n                      className={validationErrors[param.name] ? 'error' : ''}\n                    >\n                      {param.label}\n                      {param.type !== 'checkbox' && <span aria-hidden=\"true\">*</span>}\n                      <span className=\"required-indicator sr-only\">{param.type !== 'checkbox' ? 'required' : 'optional'}</span>\n                    </label>\n                    <button \n                      type=\"button\"\n                      className=\"parameter-help-button\"\n                      onClick={() => {\n                        setShowParameterHelp({\n                          name: param.name,\n                          label: param.label,\n                          description: param.description\n                        });\n                      }}\n                      aria-label={`Help for ${param.label}`}\n                    >\n                      <span aria-hidden=\"true\">?</span>\n                    </button>\n                  </div>\n                  \n                  {param.type === 'select' ? (\n                    <select\n                      id={param.name}\n                      className={`${preferences.textSize !== 'default' ? preferences.textSize : ''} ${validationErrors[param.name] ? 'error-input' : ''}`}\n                      value={parameters[param.name] || ''}\n                      onChange={(e) => handleParameterChange(param.name, e.target.value)}\n                      disabled={loading}\n                      aria-invalid={!!validationErrors[param.name]}\n                      aria-describedby={validationErrors[param.name] ? `${param.name}-error` : `${param.name}-help`}\n                    >\n                      {param.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                          {option.label}\n                        </option>\n                      ))}\n                    </select>\n                  ) : param.type === 'number' ? (\n                    <div className=\"number-input-container\">\n                      <input\n                        type=\"number\"\n                        id={param.name}\n                        className={`${preferences.textSize !== 'default' ? preferences.textSize : ''} ${validationErrors[param.name] ? 'error-input' : ''}`}\n                        value={parameters[param.name] || ''}\n                        onChange={(e) => handleParameterChange(param.name, Number(e.target.value))}\n                        min={param.min}\n                        max={param.max}\n                        step={param.step || 1}\n                        disabled={loading}\n                        aria-invalid={!!validationErrors[param.name]}\n                        aria-describedby={validationErrors[param.name] ? `${param.name}-error` : `${param.name}-help`}\n                      />\n                      {param.min !== undefined && param.max !== undefined && (\n                        <div className=\"range-indicator\">\n                          Range: {param.min} to {param.max}\n                        </div>\n                      )}\n                    </div>\n                  ) : param.type === 'checkbox' ? (\n                    <div className=\"checkbox-container\">\n                      <input\n                        type=\"checkbox\"\n                        id={param.name}\n                        checked={parameters[param.name] || false}\n                        onChange={(e) => handleParameterChange(param.name, e.target.checked)}\n                        disabled={loading}\n                        aria-describedby={`${param.name}-help`}\n                      />\n                      <span className=\"checkbox-label\">{param.description}</span>\n                    </div>\n                  ) : (\n                    <input\n                      type=\"text\"\n                      id={param.name}\n                      className={`${preferences.textSize !== 'default' ? preferences.textSize : ''} ${validationErrors[param.name] ? 'error-input' : ''}`}\n                      value={parameters[param.name] || ''}\n                      onChange={(e) => handleParameterChange(param.name, e.target.value)}\n                      disabled={loading}\n                      aria-invalid={!!validationErrors[param.name]}\n                      aria-describedby={validationErrors[param.name] ? `${param.name}-error` : `${param.name}-help`}\n                    />\n                  )}\n                  \n                  {validationErrors[param.name] && (\n                    <div id={`${param.name}-error`} className=\"error-message\" role=\"alert\">\n                      {validationErrors[param.name]}\n                    </div>\n                  )}\n                  \n                  <div id={`${param.name}-help`} className=\"help-text\">\n                    {param.description}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n          \n          <div className=\"form-actions\">\n            <button \n              type=\"submit\" \n              className=\"primary-button run-button\"\n              disabled={loading || !selectedDataset || !analysisType}\n              aria-busy={loading}\n            >\n              {loading ? 'Running Analysis...' : 'Run Analysis'}\n            </button>\n            \n            <button\n              type=\"button\"\n              className=\"secondary-button reset-button\"\n              onClick={() => {\n                setParameters({});\n                setAnalysisType('');\n                setAnalysisStatus(null);\n                setResults(null);\n                setTaskId(null);\n                setValidationErrors({});\n              }}\n              disabled={loading || (!analysisType && !selectedDataset)}\n            >\n              Reset Form\n            </button>\n          </div>\n        </form>\n        \n        {analysisStatus && (\n          <div \n            className=\"analysis-status\"\n            role=\"status\"\n            aria-live=\"polite\"\n          >\n            <h3>Analysis Status</h3>\n            <p>{analysisStatus}</p>\n            {taskId && !results && (\n              <div className=\"loading-progress\">\n                <div className=\"loading-spinner\" aria-hidden=\"true\"></div>\n                <p className=\"progress-text\">Your analysis is running. This may take a moment...</p>\n              </div>\n            )}\n          </div>\n        )}\n        \n        {results && (\n          <div \n            className=\"analysis-results\"\n            role=\"region\"\n            aria-label=\"Analysis results\"\n          >\n            <h3>Analysis Results: {analysisOptions.find(opt => opt.value === analysisType)?.label}</h3>\n            <div className=\"result-summary\">\n              <p>\n                <strong>Dataset:</strong> {getSelectedDatasetName()}<br />\n                <strong>Analysis Type:</strong> {analysisOptions.find(opt => opt.value === analysisType)?.label}<br />\n                <strong>Completed:</strong> {new Date().toLocaleString()}\n              </p>\n            </div>\n            \n            <div className=\"result-data\">\n              <h4>Output Statistics</h4>\n              <div className=\"result-stats\">\n                {results.statistics && Object.entries(results.statistics).map(([key, value]) => (\n                  <div className=\"stat-item\" key={key}>\n                    <div className=\"stat-label\">{key.replace(/_/g, ' ')}</div>\n                    <div className=\"stat-value\">{typeof value === 'number' ? value.toLocaleString() : value}</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"result-visualization\">\n              <h4>Visualization Preview</h4>\n              <div className=\"visualization-placeholder\" aria-label=\"Visualization of analysis results\">\n                {results.output_layers && results.output_layers.length > 0 ? (\n                  <img \n                    src=\"/placeholder-map-result.png\" \n                    alt={`${analysisType} analysis result visualization`} \n                    className=\"result-preview-image\"\n                  />\n                ) : (\n                  <p>No visualization available for this analysis.</p>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"result-actions\">\n              <button \n                onClick={() => {\n                  window.location.href = `/map?analysis=${taskId}`;\n                }}\n                className=\"primary-button add-to-map-btn\"\n                aria-label=\"Add these results to the interactive map view\"\n              >\n                View on Map\n              </button>\n              \n              <button \n                onClick={() => {\n                  // Mock export functionality\n                  announceToScreenReader(\"Exporting results. Your download will begin shortly.\");\n                }}\n                className=\"secondary-button export-btn\"\n                aria-label=\"Export these results to a file\"\n              >\n                Export Results\n              </button>\n              \n              <button\n                onClick={() => {\n                  setResults(null);\n                  setTaskId(null);\n                  setAnalysisStatus(null);\n                  announceToScreenReader(\"Results cleared. You can now run a new analysis.\");\n                }}\n                className=\"text-button clear-btn\"\n                aria-label=\"Clear these results and start a new analysis\"\n              >\n                Clear Results\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Analysis Method Explainer Modal */}\n      {showExplainer && analysisType && (\n        <AnalysisMethodExplainer \n          analysisType={analysisType}\n          options={analysisOptions.find(opt => opt.value === analysisType)}\n          onClose={() => setShowExplainer(false)}\n        />\n      )}\n      \n      {/* Parameter Help Modal */}\n      {showParameterHelp && (\n        <AnalysisParameterHelp\n          parameter={showParameterHelp}\n          onClose={() => setShowParameterHelp(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default AnalysisComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}