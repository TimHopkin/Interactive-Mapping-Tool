{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useMap } from 'react-leaflet';\n\n// Component to enable keyboard navigation on maps\nconst MapKeyboardNavigation = () => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (!map) return;\n\n    // Focus event - when map container receives focus\n    const handleFocus = () => {\n      // Add a visible focus indicator around the map\n      map.getContainer().classList.add('map-focused');\n    };\n\n    // Blur event - when focus leaves the map\n    const handleBlur = () => {\n      map.getContainer().classList.remove('map-focused');\n    };\n\n    // Handle keyboard navigation\n    const handleKeyDown = e => {\n      // Only handle events when map container is focused\n      if (document.activeElement !== map.getContainer()) return;\n      const panAmount = 100; // pixels to pan per key press\n      const zoomAmount = 1; // zoom levels to change per key press\n\n      switch (e.key) {\n        case 'ArrowUp':\n          e.preventDefault();\n          map.panBy([0, -panAmount]);\n          break;\n        case 'ArrowDown':\n          e.preventDefault();\n          map.panBy([0, panAmount]);\n          break;\n        case 'ArrowLeft':\n          e.preventDefault();\n          map.panBy([-panAmount, 0]);\n          break;\n        case 'ArrowRight':\n          e.preventDefault();\n          map.panBy([panAmount, 0]);\n          break;\n        case '+':\n        case '=':\n          // Plus key (with or without shift)\n          e.preventDefault();\n          map.setZoom(map.getZoom() + zoomAmount);\n          break;\n        case '-':\n        case '_':\n          // Minus key (with or without shift)\n          e.preventDefault();\n          map.setZoom(map.getZoom() - zoomAmount);\n          break;\n        case 'Home':\n          e.preventDefault();\n          map.setView(map.options.center, map.options.zoom);\n          break;\n        default:\n          break;\n      }\n    };\n\n    // Make map container focusable\n    const container = map.getContainer();\n    container.setAttribute('tabindex', '0');\n    container.setAttribute('aria-label', 'Interactive map. Use arrow keys to pan, plus/minus to zoom, Home key to reset view.');\n    container.setAttribute('role', 'application');\n\n    // Add event listeners\n    container.addEventListener('focus', handleFocus);\n    container.addEventListener('blur', handleBlur);\n    container.addEventListener('keydown', handleKeyDown);\n\n    // Create and add keyboard instructions element\n    const instructionsElement = document.createElement('div');\n    instructionsElement.className = 'sr-only';\n    instructionsElement.setAttribute('aria-live', 'polite');\n    instructionsElement.innerHTML = `\n      Keyboard Navigation: Use arrow keys to pan the map.\n      Press + to zoom in, - to zoom out, Home to reset view.\n    `;\n    container.appendChild(instructionsElement);\n\n    // Cleanup function\n    return () => {\n      container.removeEventListener('focus', handleFocus);\n      container.removeEventListener('blur', handleBlur);\n      container.removeEventListener('keydown', handleKeyDown);\n      if (container.contains(instructionsElement)) {\n        container.removeChild(instructionsElement);\n      }\n    };\n  }, [map]);\n\n  // This component doesn't render anything visible\n  return null;\n};\n_s(MapKeyboardNavigation, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapKeyboardNavigation;\nexport default MapKeyboardNavigation;\nvar _c;\n$RefreshReg$(_c, \"MapKeyboardNavigation\");","map":{"version":3,"names":["useEffect","useMap","MapKeyboardNavigation","_s","map","handleFocus","getContainer","classList","add","handleBlur","remove","handleKeyDown","e","document","activeElement","panAmount","zoomAmount","key","preventDefault","panBy","setZoom","getZoom","setView","options","center","zoom","container","setAttribute","addEventListener","instructionsElement","createElement","className","innerHTML","appendChild","removeEventListener","contains","removeChild","_c","$RefreshReg$"],"sources":["/Users/timhopkin/Documents/Software Development/Interactive Mapping Tool/frontend/src/components/map/MapKeyboardNavigation.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useMap } from 'react-leaflet';\n\n// Component to enable keyboard navigation on maps\nconst MapKeyboardNavigation = () => {\n  const map = useMap();\n  \n  useEffect(() => {\n    if (!map) return;\n    \n    // Focus event - when map container receives focus\n    const handleFocus = () => {\n      // Add a visible focus indicator around the map\n      map.getContainer().classList.add('map-focused');\n    };\n    \n    // Blur event - when focus leaves the map\n    const handleBlur = () => {\n      map.getContainer().classList.remove('map-focused');\n    };\n    \n    // Handle keyboard navigation\n    const handleKeyDown = (e) => {\n      // Only handle events when map container is focused\n      if (document.activeElement !== map.getContainer()) return;\n      \n      const panAmount = 100; // pixels to pan per key press\n      const zoomAmount = 1; // zoom levels to change per key press\n      \n      switch (e.key) {\n        case 'ArrowUp':\n          e.preventDefault();\n          map.panBy([0, -panAmount]);\n          break;\n        case 'ArrowDown':\n          e.preventDefault();\n          map.panBy([0, panAmount]);\n          break;\n        case 'ArrowLeft':\n          e.preventDefault();\n          map.panBy([-panAmount, 0]);\n          break;\n        case 'ArrowRight':\n          e.preventDefault();\n          map.panBy([panAmount, 0]);\n          break;\n        case '+':\n        case '=': // Plus key (with or without shift)\n          e.preventDefault();\n          map.setZoom(map.getZoom() + zoomAmount);\n          break;\n        case '-':\n        case '_': // Minus key (with or without shift)\n          e.preventDefault();\n          map.setZoom(map.getZoom() - zoomAmount);\n          break;\n        case 'Home':\n          e.preventDefault();\n          map.setView(map.options.center, map.options.zoom);\n          break;\n        default:\n          break;\n      }\n    };\n    \n    // Make map container focusable\n    const container = map.getContainer();\n    container.setAttribute('tabindex', '0');\n    container.setAttribute('aria-label', 'Interactive map. Use arrow keys to pan, plus/minus to zoom, Home key to reset view.');\n    container.setAttribute('role', 'application');\n    \n    // Add event listeners\n    container.addEventListener('focus', handleFocus);\n    container.addEventListener('blur', handleBlur);\n    container.addEventListener('keydown', handleKeyDown);\n    \n    // Create and add keyboard instructions element\n    const instructionsElement = document.createElement('div');\n    instructionsElement.className = 'sr-only';\n    instructionsElement.setAttribute('aria-live', 'polite');\n    instructionsElement.innerHTML = `\n      Keyboard Navigation: Use arrow keys to pan the map.\n      Press + to zoom in, - to zoom out, Home to reset view.\n    `;\n    container.appendChild(instructionsElement);\n    \n    // Cleanup function\n    return () => {\n      container.removeEventListener('focus', handleFocus);\n      container.removeEventListener('blur', handleBlur);\n      container.removeEventListener('keydown', handleKeyDown);\n      if (container.contains(instructionsElement)) {\n        container.removeChild(instructionsElement);\n      }\n    };\n  }, [map]);\n  \n  // This component doesn't render anything visible\n  return null;\n};\n\nexport default MapKeyboardNavigation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}