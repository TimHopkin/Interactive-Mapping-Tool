{"ast":null,"code":"var _jsxFileName = \"/Users/timhopkin/Documents/Software Development/Interactive Mapping Tool/frontend/src/context/UserPreferencesContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserPreferencesContext = /*#__PURE__*/createContext();\nexport const useUserPreferences = () => {\n  _s();\n  return useContext(UserPreferencesContext);\n};\n_s(useUserPreferences, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const UserPreferencesProvider = ({\n  children\n}) => {\n  _s2();\n  // Get initial preferences from localStorage or system settings\n  const getInitialPreferences = () => {\n    const savedPreferences = localStorage.getItem('userPreferences');\n    if (savedPreferences) {\n      return JSON.parse(savedPreferences);\n    }\n\n    // Default preferences with system settings where possible\n    return {\n      textSize: 'default',\n      highContrast: false,\n      reducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n      screenReaderOptimized: false,\n      language: navigator.language.split('-')[0] || 'en',\n      mapControls: {\n        simplifiedControls: false,\n        largeButtons: false,\n        keyboardNavigation: true\n      }\n    };\n  };\n  const [preferences, setPreferences] = useState(getInitialPreferences);\n\n  // Update text size preference\n  const updateTextSize = size => {\n    setPreferences(prev => ({\n      ...prev,\n      textSize: size\n    }));\n  };\n\n  // Update high contrast preference\n  const updateHighContrast = enabled => {\n    setPreferences(prev => ({\n      ...prev,\n      highContrast: enabled\n    }));\n  };\n\n  // Update reduced motion preference\n  const updateMotionReduction = enabled => {\n    setPreferences(prev => ({\n      ...prev,\n      reducedMotion: enabled\n    }));\n  };\n\n  // Update screen reader optimization preference\n  const updateScreenReader = enabled => {\n    setPreferences(prev => ({\n      ...prev,\n      screenReaderOptimized: enabled\n    }));\n  };\n\n  // Update language preference\n  const updateLanguage = language => {\n    setPreferences(prev => ({\n      ...prev,\n      language\n    }));\n  };\n\n  // Update map control preferences\n  const updateMapControls = controls => {\n    setPreferences(prev => ({\n      ...prev,\n      mapControls: {\n        ...prev.mapControls,\n        ...controls\n      }\n    }));\n  };\n\n  // Save preferences to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem('userPreferences', JSON.stringify(preferences));\n\n    // Apply preferences to document\n    document.documentElement.setAttribute('data-text-size', preferences.textSize);\n    if (preferences.highContrast) {\n      document.documentElement.setAttribute('data-high-contrast', 'true');\n    } else {\n      document.documentElement.removeAttribute('data-high-contrast');\n    }\n    if (preferences.reducedMotion) {\n      document.documentElement.setAttribute('data-reduced-motion', 'true');\n    } else {\n      document.documentElement.removeAttribute('data-reduced-motion');\n    }\n    if (preferences.screenReaderOptimized) {\n      document.documentElement.setAttribute('data-screen-reader', 'true');\n    } else {\n      document.documentElement.removeAttribute('data-screen-reader');\n    }\n    document.documentElement.setAttribute('lang', preferences.language);\n  }, [preferences]);\n  const value = {\n    preferences,\n    updateTextSize,\n    updateHighContrast,\n    updateMotionReduction,\n    updateScreenReader,\n    updateLanguage,\n    updateMapControls\n  };\n  return /*#__PURE__*/_jsxDEV(UserPreferencesContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s2(UserPreferencesProvider, \"hTYW6lNQgERHfaAN9AYDMGcv3Wc=\");\n_c = UserPreferencesProvider;\nvar _c;\n$RefreshReg$(_c, \"UserPreferencesProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","UserPreferencesContext","useUserPreferences","_s","UserPreferencesProvider","children","_s2","getInitialPreferences","savedPreferences","localStorage","getItem","JSON","parse","textSize","highContrast","reducedMotion","window","matchMedia","matches","screenReaderOptimized","language","navigator","split","mapControls","simplifiedControls","largeButtons","keyboardNavigation","preferences","setPreferences","updateTextSize","size","prev","updateHighContrast","enabled","updateMotionReduction","updateScreenReader","updateLanguage","updateMapControls","controls","setItem","stringify","document","documentElement","setAttribute","removeAttribute","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/timhopkin/Documents/Software Development/Interactive Mapping Tool/frontend/src/context/UserPreferencesContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst UserPreferencesContext = createContext();\n\nexport const useUserPreferences = () => useContext(UserPreferencesContext);\n\nexport const UserPreferencesProvider = ({ children }) => {\n  // Get initial preferences from localStorage or system settings\n  const getInitialPreferences = () => {\n    const savedPreferences = localStorage.getItem('userPreferences');\n    \n    if (savedPreferences) {\n      return JSON.parse(savedPreferences);\n    }\n    \n    // Default preferences with system settings where possible\n    return {\n      textSize: 'default',\n      highContrast: false,\n      reducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n      screenReaderOptimized: false,\n      language: navigator.language.split('-')[0] || 'en',\n      mapControls: {\n        simplifiedControls: false,\n        largeButtons: false,\n        keyboardNavigation: true\n      }\n    };\n  };\n\n  const [preferences, setPreferences] = useState(getInitialPreferences);\n\n  // Update text size preference\n  const updateTextSize = (size) => {\n    setPreferences(prev => ({\n      ...prev,\n      textSize: size\n    }));\n  };\n\n  // Update high contrast preference\n  const updateHighContrast = (enabled) => {\n    setPreferences(prev => ({\n      ...prev,\n      highContrast: enabled\n    }));\n  };\n\n  // Update reduced motion preference\n  const updateMotionReduction = (enabled) => {\n    setPreferences(prev => ({\n      ...prev,\n      reducedMotion: enabled\n    }));\n  };\n\n  // Update screen reader optimization preference\n  const updateScreenReader = (enabled) => {\n    setPreferences(prev => ({\n      ...prev,\n      screenReaderOptimized: enabled\n    }));\n  };\n\n  // Update language preference\n  const updateLanguage = (language) => {\n    setPreferences(prev => ({\n      ...prev,\n      language\n    }));\n  };\n\n  // Update map control preferences\n  const updateMapControls = (controls) => {\n    setPreferences(prev => ({\n      ...prev,\n      mapControls: {\n        ...prev.mapControls,\n        ...controls\n      }\n    }));\n  };\n\n  // Save preferences to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem('userPreferences', JSON.stringify(preferences));\n    \n    // Apply preferences to document\n    document.documentElement.setAttribute('data-text-size', preferences.textSize);\n    \n    if (preferences.highContrast) {\n      document.documentElement.setAttribute('data-high-contrast', 'true');\n    } else {\n      document.documentElement.removeAttribute('data-high-contrast');\n    }\n    \n    if (preferences.reducedMotion) {\n      document.documentElement.setAttribute('data-reduced-motion', 'true');\n    } else {\n      document.documentElement.removeAttribute('data-reduced-motion');\n    }\n    \n    if (preferences.screenReaderOptimized) {\n      document.documentElement.setAttribute('data-screen-reader', 'true');\n    } else {\n      document.documentElement.removeAttribute('data-screen-reader');\n    }\n    \n    document.documentElement.setAttribute('lang', preferences.language);\n  }, [preferences]);\n\n  const value = {\n    preferences,\n    updateTextSize,\n    updateHighContrast,\n    updateMotionReduction,\n    updateScreenReader,\n    updateLanguage,\n    updateMapControls\n  };\n\n  return (\n    <UserPreferencesContext.Provider value={value}>\n      {children}\n    </UserPreferencesContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}